{"ast":null,"code":"import axios from 'axios';\nconst state = {\n  suppliers: [],\n  selectedSupplier: null,\n  loading: false,\n  error: null\n};\nconst mutations = {\n  SET_SUPPLIERS(state, suppliers) {\n    state.suppliers = suppliers;\n  },\n  SET_SELECTED_SUPPLIER(state, supplier) {\n    state.selectedSupplier = supplier;\n  },\n  SET_LOADING(state, loading) {\n    state.loading = loading;\n  },\n  SET_ERROR(state, error) {\n    state.error = error;\n  }\n};\nconst actions = {\n  async fetchSuppliers({\n    commit,\n    rootState\n  }) {\n    commit('SET_LOADING', true);\n    try {\n      const token = rootState.token;\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      const response = await axios.get('api/Suppliers/ReadSuppliers', configuration);\n      commit('SET_SUPPLIERS', response.data);\n    } catch (error) {\n      commit('SET_ERROR', error.message);\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  },\n  async fetchSupplier({\n    commit,\n    rootState\n  }, text) {\n    commit('SET_LOADING', true);\n    try {\n      const token = rootState.token;\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      const response = await axios.get(`api/Suppliers/SearchSupplier/${text}`, configuration);\n      commit('SET_SUPPLIERS', response.data);\n    } catch (error) {\n      commit('SET_ERROR', error.message);\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  },\n  async selectSuppliers({\n    commit,\n    rootState\n  }) {\n    commit('SET_LOADING', true);\n    try {\n      const token = rootState.token;\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      const response = await axios.get('api/Suppliers/SelectSuppliers', configuration);\n      commit('SET_SUPPLIERS', response.data);\n    } catch (error) {\n      commit('SET_ERROR', error.message);\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  },\n  async createSupplier({\n    dispatch,\n    rootState\n  }, supplier) {\n    const token = rootState.token;\n    let header = {\n      Authorization: \"Bearer \" + token\n    };\n    let configuration = {\n      headers: header\n    };\n    await axios.post('api/Suppliers/CreateSupplier', supplier, configuration);\n    dispatch('fetchSuppliers');\n  },\n  async updateSupplier({\n    dispatch,\n    rootState\n  }, supplier) {\n    const token = rootState.token;\n    let header = {\n      Authorization: \"Bearer \" + token\n    };\n    let configuration = {\n      headers: header\n    };\n    await axios.put('api/Suppliers/UpdateSupplier', supplier, configuration);\n    dispatch('fetchSuppliers');\n  },\n  async enabledSupplier({\n    dispatch,\n    rootState\n  }, id) {\n    const token = rootState.token;\n    let header = {\n      Authorization: \"Bearer \" + token\n    };\n    let configuration = {\n      headers: header\n    };\n    await axios.put(`api/Suppliers/EnabledSupplier/${id}`, {}, configuration);\n    dispatch('fetchSuppliers');\n  },\n  async disabledSupplier({\n    dispatch,\n    rootState\n  }, id) {\n    const token = rootState.token;\n    let header = {\n      Authorization: \"Bearer \" + token\n    };\n    let configuration = {\n      headers: header\n    };\n    await axios.put(`api/Suppliers/DisabledSupplier/${id}`, {}, configuration);\n    dispatch('fetchSuppliers');\n  }\n};\nconst getters = {\n  suppliers: state => state.suppliers,\n  selectedSupplier: state => state.selectedSupplier,\n  loading: state => state.loading,\n  error: state => state.error\n};\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["axios","state","suppliers","selectedSupplier","loading","error","mutations","SET_SUPPLIERS","SET_SELECTED_SUPPLIER","supplier","SET_LOADING","SET_ERROR","actions","fetchSuppliers","commit","rootState","token","header","Authorization","configuration","headers","response","get","data","message","fetchSupplier","text","selectSuppliers","createSupplier","dispatch","post","updateSupplier","put","enabledSupplier","id","disabledSupplier","getters","namespaced"],"sources":["C:/Users/Sergio/Desktop/SOFINV/FrontEnd/src/store/modules/supplier.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst state = {\r\n  suppliers: [],\r\n  selectedSupplier: null,\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst mutations = {\r\n  SET_SUPPLIERS(state, suppliers) {\r\n    state.suppliers = suppliers;\r\n  },\r\n  SET_SELECTED_SUPPLIER(state, supplier) {\r\n    state.selectedSupplier = supplier;\r\n  },\r\n  SET_LOADING(state, loading) {\r\n    state.loading = loading;\r\n  },\r\n  SET_ERROR(state, error) {\r\n    state.error = error;\r\n  },\r\n};\r\n\r\nconst actions = {\r\n  async fetchSuppliers({ commit, rootState }) {\r\n    commit('SET_LOADING', true);\r\n    try {\r\n      const token = rootState.token; \r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      const response = await axios.get('api/Suppliers/ReadSuppliers', configuration);\r\n      commit('SET_SUPPLIERS', response.data);\r\n    } catch (error) {\r\n      commit('SET_ERROR', error.message);\r\n    } finally {\r\n      commit('SET_LOADING', false);\r\n    }\r\n  },\r\n  async fetchSupplier({ commit, rootState }, text) {\r\n    commit('SET_LOADING', true);\r\n    try {\r\n      const token = rootState.token; \r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      const response = await axios.get(`api/Suppliers/SearchSupplier/${text}`, configuration);\r\n      commit('SET_SUPPLIERS', response.data);\r\n    } catch (error) {\r\n      commit('SET_ERROR', error.message);\r\n    } finally {\r\n      commit('SET_LOADING', false);\r\n    }\r\n  },\r\n  async selectSuppliers({ commit, rootState }) {\r\n    commit('SET_LOADING', true);\r\n    try {\r\n      const token = rootState.token; \r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      const response = await axios.get('api/Suppliers/SelectSuppliers', configuration);\r\n      commit('SET_SUPPLIERS', response.data);\r\n    } catch (error) {\r\n      commit('SET_ERROR', error.message);\r\n    } finally {\r\n      commit('SET_LOADING', false);\r\n    }\r\n  },\r\n  async createSupplier({ dispatch, rootState }, supplier) {\r\n    const token = rootState.token; \r\n    let header = { Authorization: \"Bearer \" + token };\r\n    let configuration = { headers: header };\r\n    await axios.post('api/Suppliers/CreateSupplier', supplier, configuration);\r\n    dispatch('fetchSuppliers');\r\n  },\r\n  async updateSupplier({ dispatch, rootState }, supplier) {\r\n    const token = rootState.token; \r\n    let header = { Authorization: \"Bearer \" + token };\r\n    let configuration = { headers: header };\r\n    await axios.put('api/Suppliers/UpdateSupplier', supplier, configuration);\r\n    dispatch('fetchSuppliers');\r\n  },\r\n  async enabledSupplier({ dispatch, rootState }, id) {\r\n    const token = rootState.token; \r\n    let header = { Authorization: \"Bearer \" + token };\r\n    let configuration = { headers: header };\r\n    await axios.put(`api/Suppliers/EnabledSupplier/${id}`, {}, configuration);\r\n    dispatch('fetchSuppliers');\r\n  },\r\n  async disabledSupplier({ dispatch, rootState }, id) {\r\n    const token = rootState.token; \r\n    let header = { Authorization: \"Bearer \" + token };\r\n    let configuration = { headers: header };\r\n    await axios.put(`api/Suppliers/DisabledSupplier/${id}`, {}, configuration);\r\n    dispatch('fetchSuppliers');\r\n  },\r\n};\r\n\r\nconst getters = {\r\n  suppliers: (state) => state.suppliers,\r\n  selectedSupplier: (state) => state.selectedSupplier,\r\n  loading: (state) => state.loading,\r\n  error: (state) => state.error,\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  mutations,\r\n  actions,\r\n  getters,\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}