{"ast":null,"code":"import axios from \"axios\";\nimport { jwtDecode } from \"jwt-decode\";\nimport store from \"@/store\";\nconst state = {\n  categories: [],\n  selectedCategory: null,\n  loading: false,\n  error: null\n};\nconst mutations = {\n  SET_CATEGORIES(state, categories) {\n    state.categories = categories;\n  },\n  SET_SELECTED_CATEGORY(state, category) {\n    state.selectedCategory = category;\n  },\n  SET_LOADING(state, loading) {\n    state.loading = loading;\n  },\n  SET_ERROR(state, error) {\n    state.error = error;\n  }\n};\nconst isExpired = token => {\n  if (!token) return false;\n  const decodedToken = jwtDecode(token);\n  const currentTime = Date.now() / 1000;\n  return decodedToken.exp < currentTime;\n};\nconst actions = {\n  async fetchCategories({\n    commit,\n    rootState\n  }) {\n    commit(\"SET_LOADING\", true);\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      const response = await axios.get(\"api/Categories/ReadCategories\", configuration);\n      commit(\"SET_CATEGORIES\", response.data);\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    } finally {\n      commit(\"SET_LOADING\", false);\n    }\n  },\n  async fetchCategory({\n    commit,\n    rootState\n  }, text) {\n    commit(\"SET_LOADING\", true);\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      const response = await axios.get(`api/Categories/SearchCategory/${text}`, configuration);\n      commit(\"SET_CATEGORIES\", response.data);\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    } finally {\n      commit(\"SET_LOADING\", false);\n    }\n  },\n  async selectCategories({\n    commit,\n    rootState\n  }) {\n    commit(\"SET_LOADING\", true);\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      const response = await axios.get(\"api/Categories/SelectCategories\", configuration);\n      commit(\"SET_CATEGORIES\", response.data);\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    } finally {\n      commit(\"SET_LOADING\", false);\n    }\n  },\n  async createCategory({\n    commit,\n    rootState\n  }, category) {\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      await axios.post(\"api/Categories/CreateCategory\", category, configuration);\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    }\n  },\n  async updateCategory({\n    commit,\n    rootState\n  }, category) {\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      await axios.put(\"api/Categories/UpdateCategory\", category, configuration);\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    }\n  },\n  async enabledCategory({\n    commit,\n    dispatch,\n    rootState\n  }, id) {\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      await axios.put(`api/Categories/EnabledCategory/${id}`, {}, configuration);\n      dispatch(\"fetchCategories\");\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    }\n  },\n  async disabledCategory({\n    commit,\n    dispatch,\n    rootState\n  }, id) {\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      await axios.put(`api/Categories/DisabledCategory/${id}`, {}, configuration);\n      dispatch(\"fetchCategories\");\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    }\n  }\n};\nconst getters = {\n  categories: state => state.categories,\n  selectedCategory: state => state.selectedCategory,\n  loading: state => state.loading,\n  error: state => state.error\n};\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["axios","jwtDecode","store","state","categories","selectedCategory","loading","error","mutations","SET_CATEGORIES","SET_SELECTED_CATEGORY","category","SET_LOADING","SET_ERROR","isExpired","token","decodedToken","currentTime","Date","now","exp","actions","fetchCategories","commit","rootState","dispatch","header","Authorization","configuration","headers","response","get","data","message","fetchCategory","text","selectCategories","createCategory","post","updateCategory","put","enabledCategory","id","disabledCategory","getters","namespaced"],"sources":["C:/Users/Sergio/Desktop/SOFINV/FrontEnd/src/store/modules/category.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport store from \"@/store\";\r\n\r\nconst state = {\r\n  categories: [],\r\n  selectedCategory: null,\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst mutations = {\r\n  SET_CATEGORIES(state, categories) {\r\n    state.categories = categories;\r\n  },\r\n  SET_SELECTED_CATEGORY(state, category) {\r\n    state.selectedCategory = category;\r\n  },\r\n  SET_LOADING(state, loading) {\r\n    state.loading = loading;\r\n  },\r\n  SET_ERROR(state, error) {\r\n    state.error = error;\r\n  },\r\n};\r\n\r\nconst isExpired = (token) => {\r\n  if (!token) return false;\r\n  const decodedToken = jwtDecode(token);\r\n  const currentTime = Date.now() / 1000;\r\n  return decodedToken.exp < currentTime;\r\n};\r\n\r\nconst actions = {\r\n  async fetchCategories({ commit, rootState }) {\r\n    commit(\"SET_LOADING\", true);\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      const response = await axios.get(\"api/Categories/ReadCategories\", configuration);\r\n      commit(\"SET_CATEGORIES\", response.data);\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    } finally {\r\n      commit(\"SET_LOADING\", false);\r\n    }\r\n  },\r\n  async fetchCategory({ commit, rootState }, text) {\r\n    commit(\"SET_LOADING\", true);\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      const response = await axios.get(`api/Categories/SearchCategory/${text}`, configuration);\r\n      commit(\"SET_CATEGORIES\", response.data);\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    } finally {\r\n      commit(\"SET_LOADING\", false);\r\n    }\r\n  },\r\n  async selectCategories({ commit, rootState }) {\r\n    commit(\"SET_LOADING\", true);\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      const response = await axios.get(\"api/Categories/SelectCategories\", configuration);\r\n      commit(\"SET_CATEGORIES\", response.data);\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    } finally {\r\n      commit(\"SET_LOADING\", false);\r\n    }\r\n  },\r\n  async createCategory({ commit, rootState }, category) {\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      await axios.post(\"api/Categories/CreateCategory\", category, configuration);\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    }\r\n  },\r\n  async updateCategory({ commit, rootState }, category) {\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      await axios.put(\"api/Categories/UpdateCategory\", category, configuration);\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    }\r\n  },\r\n  async enabledCategory({ commit, dispatch, rootState }, id) {\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      await axios.put(`api/Categories/EnabledCategory/${id}`, {}, configuration);\r\n      dispatch(\"fetchCategories\");\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    }\r\n  },\r\n  async disabledCategory({ commit, dispatch, rootState }, id) {\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      await axios.put(`api/Categories/DisabledCategory/${id}`, {}, configuration);\r\n      dispatch(\"fetchCategories\");\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    }\r\n  },\r\n};\r\n\r\nconst getters = {\r\n  categories: (state) => state.categories,\r\n  selectedCategory: (state) => state.selectedCategory,\r\n  loading: (state) => state.loading,\r\n  error: (state) => state.error,\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  mutations,\r\n  actions,\r\n  getters,\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}