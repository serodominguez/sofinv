{"ast":null,"code":"import axios from \"axios\";\nimport { jwtDecode } from \"jwt-decode\";\nimport store from \"@/store\";\nconst state = {\n  users: [],\n  selectedUser: null,\n  loading: false,\n  error: null\n};\nconst mutations = {\n  SET_USERS(state, users) {\n    state.users = users;\n  },\n  SET_SELECTED_USER(state, user) {\n    state.selectedUser = user;\n  },\n  SET_LOADING(state, loading) {\n    state.loading = loading;\n  },\n  SET_ERROR(state, error) {\n    state.error = error;\n  }\n};\nconst isExpired = token => {\n  if (!token) return false;\n  const decodedToken = jwtDecode(token);\n  const currentTime = Date.now() / 1000;\n  return decodedToken.exp < currentTime;\n};\nconst actions = {\n  async fetchUsers({\n    commit,\n    rootState\n  }) {\n    commit(\"SET_LOADING\", true);\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      const response = await axios.get(\"api/Users/ReadUsers\", configuration);\n      commit(\"SET_USERS\", response.data);\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    } finally {\n      commit(\"SET_LOADING\", false);\n    }\n  },\n  async fetchUser({\n    commit,\n    rootState\n  }, text) {\n    commit(\"SET_LOADING\", true);\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      const response = await axios.get(`api/Users/SearchUser/${text}`, configuration);\n      commit(\"SET_USERS\", response.data);\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    } finally {\n      commit(\"SET_LOADING\", false);\n    }\n  },\n  async createUser({\n    dispatch,\n    rootState\n  }, userData) {\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      await axios.post(\"api/Users/CreateUser\", userData, configuration);\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    }\n  },\n  async updateUser({\n    dispatch,\n    rootState\n  }, userData) {\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      await axios.put(\"api/Users/UpdateUser\", userData, configuration);\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    }\n  },\n  async enabledUser({\n    dispatch,\n    rootState\n  }, id) {\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      await axios.put(`api/Users/EnabledUser/${id}`, {}, configuration);\n      dispatch(\"fetchUsers\");\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    }\n  },\n  async disabledUser({\n    dispatch,\n    rootState\n  }, id) {\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      await axios.put(`api/Users/DisabledUser/${id}`, {}, configuration);\n      dispatch(\"fetchUsers\");\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    }\n  }\n};\nconst getters = {\n  users: state => state.users,\n  selectedUser: state => state.selectedUser,\n  loading: state => state.loading,\n  error: state => state.error\n};\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["axios","jwtDecode","store","state","users","selectedUser","loading","error","mutations","SET_USERS","SET_SELECTED_USER","user","SET_LOADING","SET_ERROR","isExpired","token","decodedToken","currentTime","Date","now","exp","actions","fetchUsers","commit","rootState","dispatch","header","Authorization","configuration","headers","response","get","data","message","fetchUser","text","createUser","userData","post","updateUser","put","enabledUser","id","disabledUser","getters","namespaced"],"sources":["C:/Users/Sergio/Desktop/SOFINV/FrontEnd/src/store/modules/user.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport store from \"@/store\";\r\n\r\nconst state = {\r\n  users: [],\r\n  selectedUser: null,\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst mutations = {\r\n  SET_USERS(state, users) {\r\n    state.users = users;\r\n  },\r\n  SET_SELECTED_USER(state, user) {\r\n    state.selectedUser = user;\r\n  },\r\n  SET_LOADING(state, loading) {\r\n    state.loading = loading;\r\n  },\r\n  SET_ERROR(state, error) {\r\n    state.error = error;\r\n  },\r\n};\r\n\r\nconst isExpired = (token) => {\r\n  if (!token) return false;\r\n  const decodedToken = jwtDecode(token);\r\n  const currentTime = Date.now() / 1000;\r\n  return decodedToken.exp < currentTime;\r\n};\r\n\r\nconst actions = {\r\n  async fetchUsers({ commit, rootState }) {\r\n    commit(\"SET_LOADING\", true);\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      const response = await axios.get(\"api/Users/ReadUsers\", configuration);\r\n      commit(\"SET_USERS\", response.data);\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    } finally {\r\n      commit(\"SET_LOADING\", false);\r\n    }\r\n  },\r\n  async fetchUser({ commit, rootState }, text) {\r\n    commit(\"SET_LOADING\", true);\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      const response = await axios.get(`api/Users/SearchUser/${text}`, configuration);\r\n      commit(\"SET_USERS\", response.data);\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    } finally {\r\n      commit(\"SET_LOADING\", false);\r\n    }\r\n  },\r\n  async createUser({ dispatch, rootState }, userData) {\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      await axios.post(\"api/Users/CreateUser\", userData, configuration);\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    }\r\n  },\r\n  async updateUser({ dispatch, rootState }, userData) {\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      await axios.put(\"api/Users/UpdateUser\", userData, configuration);\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    }\r\n  },\r\n  async enabledUser({ dispatch, rootState }, id) {\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      await axios.put(`api/Users/EnabledUser/${id}`, {}, configuration);\r\n      dispatch(\"fetchUsers\");\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    }\r\n  },\r\n  async disabledUser({ dispatch, rootState }, id) {\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      await axios.put(`api/Users/DisabledUser/${id}`, {}, configuration);\r\n      dispatch(\"fetchUsers\");\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    }\r\n  },\r\n};\r\n\r\nconst getters = {\r\n  users: (state) => state.users,\r\n  selectedUser: (state) => state.selectedUser,\r\n  loading: (state) => state.loading,\r\n  error: (state) => state.error,\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  mutations,\r\n  actions,\r\n  getters,\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}