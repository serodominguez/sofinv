{"ast":null,"code":"import axios from \"axios\";\nimport { jwtDecode } from \"jwt-decode\";\nimport store from \"@/store\";\nconst state = {\n  customers: [],\n  selectedCustomer: null,\n  loading: false,\n  error: null\n};\nconst mutations = {\n  SET_CUSTOMERS(state, customers) {\n    state.customers = customers;\n  },\n  SET_SELECTED_CUSTOMER(state, customer) {\n    state.selectedCustomer = customer;\n  },\n  SET_LOADING(state, loading) {\n    state.loading = loading;\n  },\n  SET_ERROR(state, error) {\n    state.error = error;\n  }\n};\nconst isExpired = token => {\n  if (!token) return false;\n  const decodedToken = jwtDecode(token);\n  const currentTime = Date.now() / 1000;\n  return decodedToken.exp < currentTime;\n};\nconst actions = {\n  async fetchCustomers({\n    commit,\n    rootState\n  }) {\n    console.log('asd');\n    commit(\"SET_LOADING\", true);\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      const header = {\n        Authorization: `Bearer ${token}`\n      };\n      let configuration = {\n        headers: header\n      };\n      const response = await axios.get(\"api/Customers/ReadCustomers\", configuration);\n      commit(\"SET_CUSTOMERS\", response.data);\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    } finally {\n      commit(\"SET_LOADING\", false);\n    }\n  },\n  async fetchCustomer({\n    commit,\n    rootState\n  }, text) {\n    commit(\"SET_LOADING\", true);\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      const response = await axios.get(`api/Customers/SearchCustomer/${text}`, configuration);\n      commit(\"SET_CUSTOMERS\", response.data);\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    } finally {\n      commit(\"SET_LOADING\", false);\n    }\n  },\n  async selectCustomers({\n    commit,\n    rootState\n  }) {\n    commit(\"SET_LOADING\", true);\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      const response = await axios.get(\"api/Customers/SelectCustomers\", configuration);\n      commit(\"SET_CUSTOMERS\", response.data);\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    } finally {\n      commit(\"SET_LOADING\", false);\n    }\n  },\n  async createCustomer({\n    commit,\n    rootState\n  }, customer) {\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      await axios.post(\"api/Customers/CreateCustomer\", customer, configuration);\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    }\n  },\n  async updateCustomer({\n    commit,\n    rootState\n  }, customer) {\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      await axios.put(\"api/Customers/UpdateCustomer\", customer, configuration);\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    }\n  },\n  async enabledCustomer({\n    commit,\n    dispatch,\n    rootState\n  }, id) {\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      await axios.put(`api/Customers/EnabledCustomer/${id}`, {}, configuration);\n      dispatch(\"fetchCustomers\");\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    }\n  },\n  async disabledCustomer({\n    commit,\n    dispatch,\n    rootState\n  }, id) {\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      await axios.put(`api/Customers/DisabledCustomer/${id}`, {}, configuration);\n      dispatch(\"fetchCustomers\");\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    }\n  }\n};\nconst getters = {\n  customers: state => state.customers,\n  selectedCustomer: state => state.selectedCustomer,\n  loading: state => state.loading,\n  error: state => state.error\n};\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["axios","jwtDecode","store","state","customers","selectedCustomer","loading","error","mutations","SET_CUSTOMERS","SET_SELECTED_CUSTOMER","customer","SET_LOADING","SET_ERROR","isExpired","token","decodedToken","currentTime","Date","now","exp","actions","fetchCustomers","commit","rootState","console","log","dispatch","header","Authorization","configuration","headers","response","get","data","message","fetchCustomer","text","selectCustomers","createCustomer","post","updateCustomer","put","enabledCustomer","id","disabledCustomer","getters","namespaced"],"sources":["C:/Users/Sergio/Desktop/SOFINV/FrontEnd/src/store/modules/customer.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport store from \"@/store\";\r\n\r\nconst state = {\r\n  customers: [],\r\n  selectedCustomer: null,\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst mutations = {\r\n  SET_CUSTOMERS(state, customers) {\r\n    state.customers = customers;\r\n  },\r\n  SET_SELECTED_CUSTOMER(state, customer) {\r\n    state.selectedCustomer = customer;\r\n  },\r\n  SET_LOADING(state, loading) {\r\n    state.loading = loading;\r\n  },\r\n  SET_ERROR(state, error) {\r\n    state.error = error;\r\n  },\r\n};\r\n\r\nconst isExpired = (token) => {\r\n  if (!token) return false;\r\n  const decodedToken = jwtDecode(token);\r\n  const currentTime = Date.now() / 1000;\r\n  return decodedToken.exp < currentTime;\r\n};\r\n\r\nconst actions = {\r\n  async fetchCustomers({ commit, rootState }) {\r\n    console.log('asd');\r\n    commit(\"SET_LOADING\", true);\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      const header = { Authorization: `Bearer ${token}` };\r\n      let configuration = { headers: header };\r\n      const response = await axios.get(\"api/Customers/ReadCustomers\", configuration);\r\n      commit(\"SET_CUSTOMERS\", response.data);\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    } finally {\r\n      commit(\"SET_LOADING\", false);\r\n    }\r\n  },\r\n  async fetchCustomer({ commit, rootState }, text) {\r\n    commit(\"SET_LOADING\", true);\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      const response = await axios.get(`api/Customers/SearchCustomer/${text}`, configuration);\r\n      commit(\"SET_CUSTOMERS\", response.data);\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    } finally {\r\n      commit(\"SET_LOADING\", false);\r\n    }\r\n  },\r\n  async selectCustomers({ commit, rootState }) {\r\n    commit(\"SET_LOADING\", true);\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      const response = await axios.get(\"api/Customers/SelectCustomers\", configuration);\r\n      commit(\"SET_CUSTOMERS\", response.data);\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    } finally {\r\n      commit(\"SET_LOADING\", false);\r\n    }\r\n  },\r\n  async createCustomer({ commit, rootState }, customer) {\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      await axios.post(\"api/Customers/CreateCustomer\", customer, configuration);\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    }\r\n  },\r\n  async updateCustomer({ commit, rootState }, customer) {\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      await axios.put(\"api/Customers/UpdateCustomer\", customer, configuration);\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    }\r\n  },\r\n  async enabledCustomer({ commit, dispatch, rootState }, id) {\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      await axios.put(`api/Customers/EnabledCustomer/${id}`, {}, configuration);\r\n      dispatch(\"fetchCustomers\");\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    }\r\n  },\r\n  async disabledCustomer({ commit, dispatch, rootState }, id) {\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      await axios.put(`api/Customers/DisabledCustomer/${id}`, {}, configuration);\r\n      dispatch(\"fetchCustomers\");\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    }\r\n  },\r\n};\r\n\r\nconst getters = {\r\n  customers: (state) => state.customers,\r\n  selectedCustomer: (state) => state.selectedCustomer,\r\n  loading: (state) => state.loading,\r\n  error: (state) => state.error,\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  mutations,\r\n  actions,\r\n  getters,\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}