{"ast":null,"code":"import axios from \"axios\";\nimport { jwtDecode } from \"jwt-decode\";\nimport store from \"@/store\";\nconst state = {\n  roles: [],\n  loading: false,\n  error: null\n};\nconst mutations = {\n  SET_ROLES(state, roles) {\n    state.roles = roles;\n  },\n  SET_LOADING(state, loading) {\n    state.loading = loading;\n  },\n  SET_ERROR(state, error) {\n    state.error = error;\n  }\n};\nconst isExpired = token => {\n  if (!token) return false;\n  const decodedToken = jwtDecode(token);\n  const currentTime = Date.now() / 1000;\n  return decodedToken.exp < currentTime;\n};\nconst actions = {\n  async fetchRoles({\n    commit,\n    rootState\n  }) {\n    commit(\"SET_LOADING\", true);\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      const response = await axios.get(\"api/Roles/ReadRoles\", configuration);\n      commit(\"SET_ROLES\", response.data);\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    } finally {\n      commit(\"SET_LOADING\", false);\n    }\n  },\n  async selectRoles({\n    commit,\n    rootState\n  }) {\n    commit(\"SET_LOADING\", true);\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      const response = await axios.get(\"api/Roles/SelectRoles\", configuration);\n      commit(\"SET_ROLES\", response.data);\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    } finally {\n      commit(\"SET_LOADING\", false);\n    }\n  }\n};\nconst getters = {\n  roles: state => state.roles,\n  loading: state => state.loading,\n  error: state => state.error\n};\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["axios","jwtDecode","store","state","roles","loading","error","mutations","SET_ROLES","SET_LOADING","SET_ERROR","isExpired","token","decodedToken","currentTime","Date","now","exp","actions","fetchRoles","commit","rootState","dispatch","header","Authorization","configuration","headers","response","get","data","message","selectRoles","getters","namespaced"],"sources":["C:/Users/Sergio/Desktop/SOFINV/FrontEnd-V/src/store/modules/role.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport store from \"@/store\";\r\n\r\nconst state = {\r\n  roles: [],\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst mutations = {\r\n  SET_ROLES(state, roles) {\r\n    state.roles = roles;\r\n  },\r\n  SET_LOADING(state, loading) {\r\n    state.loading = loading;\r\n  },\r\n  SET_ERROR(state, error) {\r\n    state.error = error;\r\n  },\r\n};\r\n\r\nconst isExpired = (token) => {\r\n  if (!token) return false;\r\n  const decodedToken = jwtDecode(token);\r\n  const currentTime = Date.now() / 1000;\r\n  return decodedToken.exp < currentTime;\r\n};\r\n\r\nconst actions = {\r\n  async fetchRoles({ commit, rootState }) {\r\n    commit(\"SET_LOADING\", true);\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      const response = await axios.get(\"api/Roles/ReadRoles\", configuration);\r\n      commit(\"SET_ROLES\", response.data);\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    } finally {\r\n      commit(\"SET_LOADING\", false);\r\n    }\r\n  },\r\n  async selectRoles({ commit, rootState }) {\r\n    commit(\"SET_LOADING\", true);\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      const response = await axios.get(\"api/Roles/SelectRoles\", configuration);\r\n      commit(\"SET_ROLES\", response.data);\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    } finally {\r\n      commit(\"SET_LOADING\", false);\r\n    }\r\n  },\r\n};\r\n\r\nconst getters = {\r\n  roles: (state) => state.roles,\r\n  loading: (state) => state.loading,\r\n  error: (state) => state.error,\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  mutations,\r\n  actions,\r\n  getters,\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}