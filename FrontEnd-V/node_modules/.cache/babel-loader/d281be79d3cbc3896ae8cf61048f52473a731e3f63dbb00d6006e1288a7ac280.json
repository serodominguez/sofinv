{"ast":null,"code":"import axios from 'axios';\nimport { jwtDecode } from \"jwt-decode\";\nimport store from \"@/store\";\nconst state = {\n  warehouses: [],\n  loading: false,\n  error: null\n};\nconst mutations = {\n  SET_WAREHOUSES(state, warehouses) {\n    state.warehouses = warehouses;\n  },\n  SET_LOADING(state, loading) {\n    state.loading = loading;\n  },\n  SET_ERROR(state, error) {\n    state.error = error;\n  },\n  SET_CLEAR(state) {\n    state.warehouses = [];\n  }\n};\nconst isExpired = token => {\n  if (!token) return false;\n  const decodedToken = jwtDecode(token);\n  const currentTime = Date.now() / 1000;\n  return decodedToken.exp < currentTime;\n};\nconst actions = {\n  async fetchStock({\n    commit,\n    rootState\n  }, {\n    text,\n    id\n  }) {\n    commit('SET_LOADING', true);\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header,\n        params: {\n          text: text,\n          id: id\n        }\n      };\n      const response = await axios.get(`api/Warehouses/SearchStock`, configuration);\n      commit(\"SET_WAREHOUSES\", response.data);\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    } finally {\n      commit(\"SET_LOADING\", false);\n    }\n  }\n};\nconst getters = {\n  warehouses: state => state.warehouses,\n  loading: state => state.loading,\n  error: state => state.error\n};\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["axios","jwtDecode","store","state","warehouses","loading","error","mutations","SET_WAREHOUSES","SET_LOADING","SET_ERROR","SET_CLEAR","isExpired","token","decodedToken","currentTime","Date","now","exp","actions","fetchStock","commit","rootState","text","id","dispatch","header","Authorization","configuration","headers","params","response","get","data","message","getters","namespaced"],"sources":["C:/Users/Sergio/Desktop/SOFINV/FrontEnd/src/store/modules/warehouse.js"],"sourcesContent":["import axios from 'axios';\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport store from \"@/store\";\r\n\r\nconst state = {\r\n    warehouses: [],\r\n    loading: false,\r\n    error: null,\r\n  };\r\n\r\n  const mutations = {\r\n    SET_WAREHOUSES(state, warehouses) {\r\n      state.warehouses = warehouses;\r\n    },\r\n    SET_LOADING(state, loading) {\r\n      state.loading = loading;\r\n    },\r\n    SET_ERROR(state, error) {\r\n      state.error = error;\r\n    },\r\n    SET_CLEAR(state){\r\n      state.warehouses = [];\r\n    },\r\n  };\r\n\r\n  const isExpired = (token) => {\r\n    if (!token) return false;\r\n    const decodedToken = jwtDecode(token);\r\n    const currentTime = Date.now() / 1000;\r\n    return decodedToken.exp < currentTime;\r\n  };\r\n\r\n  const actions = {\r\n    async fetchStock({ commit, rootState }, { text, id }) {\r\n      commit('SET_LOADING', true);\r\n      try {\r\n        const token = rootState.token;\r\n        if (isExpired(token)) {\r\n          await store.dispatch(\"logoff\");\r\n          return;\r\n        }\r\n         \r\n        let header = { Authorization: \"Bearer \" + token };\r\n        let configuration = { \r\n            headers: header,\r\n            params: {\r\n                text: text,\r\n                id: id\r\n            } \r\n        };\r\n        const response = await axios.get(`api/Warehouses/SearchStock`, configuration);\r\n      commit(\"SET_WAREHOUSES\", response.data);\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    } finally {\r\n      commit(\"SET_LOADING\", false);\r\n    }\r\n    },\r\n  };\r\n\r\n  const getters = {\r\n    warehouses: (state) => state.warehouses,\r\n    loading: (state) => state.loading,\r\n    error: (state) => state.error,\r\n  };\r\n  \r\n  export default {\r\n    namespaced: true,\r\n    state,\r\n    mutations,\r\n    actions,\r\n    getters,\r\n  };"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,YAAY;AACtC,OAAOC,KAAK,MAAM,SAAS;AAE3B,MAAMC,KAAK,GAAG;EACVC,UAAU,EAAE,EAAE;EACdC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,SAAS,GAAG;EAChBC,cAAcA,CAACL,KAAK,EAAEC,UAAU,EAAE;IAChCD,KAAK,CAACC,UAAU,GAAGA,UAAU;EAC/B,CAAC;EACDK,WAAWA,CAACN,KAAK,EAAEE,OAAO,EAAE;IAC1BF,KAAK,CAACE,OAAO,GAAGA,OAAO;EACzB,CAAC;EACDK,SAASA,CAACP,KAAK,EAAEG,KAAK,EAAE;IACtBH,KAAK,CAACG,KAAK,GAAGA,KAAK;EACrB,CAAC;EACDK,SAASA,CAACR,KAAK,EAAC;IACdA,KAAK,CAACC,UAAU,GAAG,EAAE;EACvB;AACF,CAAC;AAED,MAAMQ,SAAS,GAAIC,KAAK,IAAK;EAC3B,IAAI,CAACA,KAAK,EAAE,OAAO,KAAK;EACxB,MAAMC,YAAY,GAAGb,SAAS,CAACY,KAAK,CAAC;EACrC,MAAME,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;EACrC,OAAOH,YAAY,CAACI,GAAG,GAAGH,WAAW;AACvC,CAAC;AAED,MAAMI,OAAO,GAAG;EACd,MAAMC,UAAUA,CAAC;IAAEC,MAAM;IAAEC;EAAU,CAAC,EAAE;IAAEC,IAAI;IAAEC;EAAG,CAAC,EAAE;IACpDH,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC;IAC3B,IAAI;MACF,MAAMR,KAAK,GAAGS,SAAS,CAACT,KAAK;MAC7B,IAAID,SAAS,CAACC,KAAK,CAAC,EAAE;QACpB,MAAMX,KAAK,CAACuB,QAAQ,CAAC,QAAQ,CAAC;QAC9B;MACF;MAEA,IAAIC,MAAM,GAAG;QAAEC,aAAa,EAAE,SAAS,GAAGd;MAAM,CAAC;MACjD,IAAIe,aAAa,GAAG;QAChBC,OAAO,EAAEH,MAAM;QACfI,MAAM,EAAE;UACJP,IAAI,EAAEA,IAAI;UACVC,EAAE,EAAEA;QACR;MACJ,CAAC;MACD,MAAMO,QAAQ,GAAG,MAAM/B,KAAK,CAACgC,GAAG,CAAC,4BAA4B,EAAEJ,aAAa,CAAC;MAC/EP,MAAM,CAAC,gBAAgB,EAAEU,QAAQ,CAACE,IAAI,CAAC;IACzC,CAAC,CAAC,OAAO3B,KAAK,EAAE;MACde,MAAM,CAAC,WAAW,EAAEf,KAAK,CAAC4B,OAAO,CAAC;IACpC,CAAC,SAAS;MACRb,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;IAC9B;EACA;AACF,CAAC;AAED,MAAMc,OAAO,GAAG;EACd/B,UAAU,EAAGD,KAAK,IAAKA,KAAK,CAACC,UAAU;EACvCC,OAAO,EAAGF,KAAK,IAAKA,KAAK,CAACE,OAAO;EACjCC,KAAK,EAAGH,KAAK,IAAKA,KAAK,CAACG;AAC1B,CAAC;AAED,eAAe;EACb8B,UAAU,EAAE,IAAI;EAChBjC,KAAK;EACLI,SAAS;EACTY,OAAO;EACPgB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}