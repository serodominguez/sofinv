{"ast":null,"code":"import axios from 'axios';\nconst state = {\n  categories: [],\n  selectedCategory: null,\n  loading: false,\n  error: null\n};\nconst mutations = {\n  SET_CATEGORIES(state, categories) {\n    state.categories = categories;\n  },\n  SET_SELECTED_CATEGORY(state, category) {\n    state.selectedCategory = category;\n  },\n  SET_LOADING(state, loading) {\n    state.loading = loading;\n  },\n  SET_ERROR(state, error) {\n    state.error = error;\n  }\n};\nconst actions = {\n  async fetchCategories({\n    commit\n  }) {\n    commit(\"SET_LOADING\", true);\n    try {\n      const response = await axios.get(\"api/Categories/ReadCategories\");\n      commit(\"SET_CATEGORIES\", response.data);\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    } finally {\n      commit(\"SET_LOADING\", false);\n    }\n  },\n  async fetchCategory({\n    commit\n  }, text) {\n    commit(\"SET_LOADING\", true);\n    try {\n      const response = await axios.get(`api/Categories/ReadCategory/${text}`);\n      commit(\"SET_CATEGORIES\", response.data);\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    } finally {\n      commit(\"SET_LOADING\", false);\n    }\n  },\n  async selectCategories({\n    commit\n  }) {\n    commit(\"SET_LOADING\", true);\n    try {\n      const response = await axios.get(\"api/Categories/SelectCategories\");\n      commit(\"SET_CATEGORIES\", response.data);\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    } finally {\n      commit(\"SET_LOADING\", false);\n    }\n  },\n  async createCategory({\n    dispatch\n  }, category) {\n    await axios.post(\"api/Categories/CreateCategory\", category);\n    dispatch(\"fetchCategories\");\n  },\n  async updateCategory({\n    dispatch\n  }, category) {\n    await axios.put(\"api/Categories/UpdateCategory\", category);\n    dispatch(\"fetchCategories\");\n  },\n  async enabledCategory({\n    dispatch\n  }, id) {\n    await axios.put(`api/Categories/EnabledCategory/${id}`);\n    dispatch(\"fetchCategories\");\n  },\n  async disabledCategory({\n    dispatch\n  }, id) {\n    await axios.put(`api/Categories/DisabledCategory/${id}`);\n    dispatch(\"fetchCategories\");\n  }\n};\nconst getters = {\n  categories: state => state.categories,\n  selectedCategory: state => state.selectedCategory,\n  loading: state => state.loading,\n  error: state => state.error\n};\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["axios","state","categories","selectedCategory","loading","error","mutations","SET_CATEGORIES","SET_SELECTED_CATEGORY","category","SET_LOADING","SET_ERROR","actions","fetchCategories","commit","response","get","data","message","fetchCategory","text","selectCategories","createCategory","dispatch","post","updateCategory","put","enabledCategory","id","disabledCategory","getters","namespaced"],"sources":["C:/Users/Sergio/Desktop/SOFINV/FrontEnd/src/store/modules/category.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst state = {\r\n  categories: [],\r\n  selectedCategory: null,\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst mutations = {\r\n  SET_CATEGORIES(state, categories) {\r\n    state.categories = categories;\r\n  },\r\n  SET_SELECTED_CATEGORY(state, category) {\r\n    state.selectedCategory = category;\r\n  },\r\n  SET_LOADING(state, loading) {\r\n    state.loading = loading;\r\n  },\r\n  SET_ERROR(state, error) {\r\n    state.error = error;\r\n  },\r\n};\r\n\r\nconst actions = {\r\n  async fetchCategories({ commit }) {\r\n    commit(\"SET_LOADING\", true);\r\n    try {\r\n      const response = await axios.get(\"api/Categories/ReadCategories\");\r\n      commit(\"SET_CATEGORIES\", response.data);\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    } finally {\r\n      commit(\"SET_LOADING\", false);\r\n    }\r\n  },\r\n  async fetchCategory({ commit }, text) {\r\n    commit(\"SET_LOADING\", true);\r\n    try {\r\n      const response = await axios.get(`api/Categories/ReadCategory/${text}`);\r\n      commit(\"SET_CATEGORIES\", response.data);\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    } finally {\r\n      commit(\"SET_LOADING\", false);\r\n    }\r\n  },\r\n  async selectCategories({ commit }) {\r\n    commit(\"SET_LOADING\", true);\r\n    try {\r\n      const response = await axios.get(\"api/Categories/SelectCategories\");\r\n      commit(\"SET_CATEGORIES\", response.data);\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    } finally {\r\n      commit(\"SET_LOADING\", false);\r\n    }\r\n  },\r\n  async createCategory({ dispatch }, category) {\r\n    await axios.post(\"api/Categories/CreateCategory\", category);\r\n    dispatch(\"fetchCategories\");\r\n  },\r\n  async updateCategory({ dispatch }, category) {\r\n    await axios.put(\"api/Categories/UpdateCategory\", category);\r\n    dispatch(\"fetchCategories\");\r\n  },\r\n  async enabledCategory({ dispatch }, id) {\r\n    await axios.put(`api/Categories/EnabledCategory/${id}`);\r\n    dispatch(\"fetchCategories\");\r\n  },\r\n  async disabledCategory({ dispatch }, id) {\r\n    await axios.put(`api/Categories/DisabledCategory/${id}`);\r\n    dispatch(\"fetchCategories\");\r\n  },\r\n};\r\n\r\nconst getters = {\r\n  categories: (state) => state.categories,\r\n  selectedCategory: (state) => state.selectedCategory,\r\n  loading: (state) => state.loading,\r\n  error: (state) => state.error,\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  mutations,\r\n  actions,\r\n  getters,\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}