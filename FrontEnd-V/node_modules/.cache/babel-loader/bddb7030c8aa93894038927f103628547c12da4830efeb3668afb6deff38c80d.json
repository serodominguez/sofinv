{"ast":null,"code":"import axios from \"axios\";\nimport { jwtDecode } from \"jwt-decode\";\nimport store from \"@/store\";\nconst state = {\n  stores: [],\n  selectedStore: null,\n  loading: false,\n  error: null\n};\nconst mutations = {\n  SET_STORES(state, stores) {\n    state.stores = stores;\n  },\n  SET_SELECTED_STORE(state, store) {\n    state.selectedStore = store;\n  },\n  SET_LOADING(state, loading) {\n    state.loading = loading;\n  },\n  SET_ERROR(state, error) {\n    state.error = error;\n  }\n};\nconst isExpired = token => {\n  if (!token) return false;\n  const decodedToken = jwtDecode(token);\n  const currentTime = Date.now() / 1000;\n  return decodedToken.exp < currentTime;\n};\nconst actions = {\n  async fetchStores({\n    commit,\n    rootState\n  }) {\n    commit(\"SET_LOADING\", true);\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      const response = await axios.get(\"api/Stores/ReadStores\", configuration);\n      commit(\"SET_STORES\", response.data);\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    } finally {\n      commit(\"SET_LOADING\", false);\n    }\n  },\n  async fetchStore({\n    commit,\n    rootState\n  }, text) {\n    commit(\"SET_LOADING\", true);\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      const response = await axios.get(`api/Stores/SearchStore/${text}`, configuration);\n      commit(\"SET_STORES\", response.data);\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    } finally {\n      commit(\"SET_LOADING\", false);\n    }\n  },\n  async selectStores({\n    commit,\n    rootState\n  }) {\n    commit(\"SET_LOADING\", true);\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      const response = await axios.get(\"api/Stores/SelectStores\", configuration);\n      commit(\"SET_STORES\", response.data);\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    } finally {\n      commit(\"SET_LOADING\", false);\n    }\n  },\n  async createStore({\n    dispatch,\n    rootState\n  }, store) {\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      await axios.post(\"api/Stores/CreateStore\", store, configuration);\n      dispatch(\"fetchStores\");\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    }\n  },\n  async updateStore({\n    dispatch,\n    rootState\n  }, store) {\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      await axios.put(\"api/Stores/UpdateStore\", store, configuration);\n      dispatch(\"fetchStores\");\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    }\n  },\n  async enabledStore({\n    dispatch,\n    rootState\n  }, id) {\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      await axios.put(`api/Stores/EnabledStore/${id}`, {}, configuration);\n      dispatch(\"fetchStores\");\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    }\n  },\n  async disabledStore({\n    dispatch,\n    rootState\n  }, id) {\n    try {\n      const token = rootState.token;\n      if (isExpired(token)) {\n        await store.dispatch(\"logoff\");\n        return;\n      }\n      let header = {\n        Authorization: \"Bearer \" + token\n      };\n      let configuration = {\n        headers: header\n      };\n      await axios.put(`api/Stores/DisabledStore/${id}`, {}, configuration);\n      dispatch(\"fetchStores\");\n    } catch (error) {\n      commit(\"SET_ERROR\", error.message);\n    }\n  }\n};\nconst getters = {\n  stores: state => state.stores,\n  selectedStore: state => state.selectedStore,\n  loading: state => state.loading,\n  error: state => state.error\n};\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["axios","jwtDecode","store","state","stores","selectedStore","loading","error","mutations","SET_STORES","SET_SELECTED_STORE","SET_LOADING","SET_ERROR","isExpired","token","decodedToken","currentTime","Date","now","exp","actions","fetchStores","commit","rootState","dispatch","header","Authorization","configuration","headers","response","get","data","message","fetchStore","text","selectStores","createStore","post","updateStore","put","enabledStore","id","disabledStore","getters","namespaced"],"sources":["C:/Users/Sergio/Desktop/SOFINV/FrontEnd/src/store/modules/store.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport store from \"@/store\";\r\n\r\nconst state = {\r\n  stores: [],\r\n  selectedStore: null,\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst mutations = {\r\n  SET_STORES(state, stores) {\r\n    state.stores = stores;\r\n  },\r\n  SET_SELECTED_STORE(state, store) {\r\n    state.selectedStore = store;\r\n  },\r\n  SET_LOADING(state, loading) {\r\n    state.loading = loading;\r\n  },\r\n  SET_ERROR(state, error) {\r\n    state.error = error;\r\n  },\r\n};\r\n\r\nconst isExpired = (token) => {\r\n  if (!token) return false;\r\n  const decodedToken = jwtDecode(token);\r\n  const currentTime = Date.now() / 1000;\r\n  return decodedToken.exp < currentTime;\r\n};\r\n\r\nconst actions = {\r\n  async fetchStores({ commit, rootState }) {\r\n    commit(\"SET_LOADING\", true);\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      const response = await axios.get(\"api/Stores/ReadStores\", configuration);\r\n      commit(\"SET_STORES\", response.data);\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    } finally {\r\n      commit(\"SET_LOADING\", false);\r\n    }\r\n  },\r\n  async fetchStore({ commit, rootState }, text) {\r\n    commit(\"SET_LOADING\", true);\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      const response = await axios.get(\r\n        `api/Stores/SearchStore/${text}`,\r\n        configuration\r\n      );\r\n      commit(\"SET_STORES\", response.data);\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    } finally {\r\n      commit(\"SET_LOADING\", false);\r\n    }\r\n  },\r\n  async selectStores({ commit, rootState }) {\r\n    commit(\"SET_LOADING\", true);\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      const response = await axios.get(\r\n        \"api/Stores/SelectStores\",\r\n        configuration\r\n      );\r\n      commit(\"SET_STORES\", response.data);\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    } finally {\r\n      commit(\"SET_LOADING\", false);\r\n    }\r\n  },\r\n  async createStore({ dispatch, rootState }, store) {\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      await axios.post(\"api/Stores/CreateStore\", store, configuration);\r\n      dispatch(\"fetchStores\");\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    }\r\n  },\r\n  async updateStore({ dispatch, rootState }, store) {\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      await axios.put(\"api/Stores/UpdateStore\", store, configuration);\r\n      dispatch(\"fetchStores\");\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    }\r\n  },\r\n  async enabledStore({ dispatch, rootState }, id) {\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      await axios.put(`api/Stores/EnabledStore/${id}`, {}, configuration);\r\n      dispatch(\"fetchStores\");\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    }\r\n  },\r\n  async disabledStore({ dispatch, rootState }, id) {\r\n    try {\r\n      const token = rootState.token;\r\n      if (isExpired(token)) {\r\n        await store.dispatch(\"logoff\");\r\n        return;\r\n      }\r\n\r\n      let header = { Authorization: \"Bearer \" + token };\r\n      let configuration = { headers: header };\r\n      await axios.put(`api/Stores/DisabledStore/${id}`, {}, configuration);\r\n      dispatch(\"fetchStores\");\r\n    } catch (error) {\r\n      commit(\"SET_ERROR\", error.message);\r\n    }\r\n  },\r\n};\r\n\r\nconst getters = {\r\n  stores: (state) => state.stores,\r\n  selectedStore: (state) => state.selectedStore,\r\n  loading: (state) => state.loading,\r\n  error: (state) => state.error,\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  mutations,\r\n  actions,\r\n  getters,\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}